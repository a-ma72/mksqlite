/**
\page detail_desc Detailed description
\tableofcontents

 SQLite is an embedded SQL Engine, which can be used to access SQL
 databases without a server.  
 MKSQLITE offers an interface to this database engine.
 <HR>

 \section detail_desc_sec1 General calling sequence:
 \code
  [[dbid][, rowcount][, colnames][, row_id]] = mksqlite([dbid, ] SQLCommand [, Argument 1][, Argument 2], ...)
 \endcode
 Parameters \a dbid, \a rowcount and \a colnames are optional. \a dbid is only necessary if one is
 working with multiple databases at once. If \a dbid is left out, then 
 database number 1 is used. On fetch queries \a rowcount will take the number of rows,
 \a colnames will take the table column names and \a row_id the corresponding rowid. If 
 \a param_wrapping feature is set, \a row_id catches all ROWIDs in a row vector.
 <HR>
 
 \section detail_desc_sec2 Function calls
 \anchor cmd_open
 \code
  mksqlite('open', 'dataBaseName' [,iomode] [,threadmode])
 \endcode
 or
 \code
  dbid = mksqlite(0, 'open', 'dataBaseName' [,iomode] [,threadmode])
 \endcode
 Opens the database with name "dataBaseName".  If the database does
 not exist, an empty one will be created.  If a \a dbid is given that is 
 already open, it will be closed before opening again.  Providing a \a dbid 
 of 0 will return the next free \a dbid.\n
 - \a iomode may be "ro", "rw" or "rwc" (default)\n
 - \a threadmode may by "single" (default), "multi", "serial"

 \anchor cmd_close
 \code
  mksqlite('close')
 \endcode
 or
 \code
  mksqlite(dbid, 'close')
 \endcode
 or
 \code
  mksqlite(0, 'close')
 \endcode
 Closes the database file. If a \a dbid is provided, the corresponding
 database is closed.  For \a dbid 0, all open databases are closed.

 \anchor cmd_version_mex
 \code
  mksqlite('version mex')                 (1
 \endcode
 or
 \code
  version = mksqlite('version mex')       (2
 \endcode
 Returns the version of mksqlite in the output (1), or as a string (2).

 \anchor cmd_version_sql
 \code
  mksqlite('version sql')                 (1
 \endcode
 or
 \code
  version = mksqlite('version sql')       (2
 \endcode
 Returns the version of the SQLite Engine in the output (1), or as a
 string (2).
 \code
  mksqlite( SQL-Command )
 \endcode
 or
 \code
  mksqlite( dbid, SQL-Command )
 \endcode
 Carries out the given "SQL-Command"
 \n
 \b Example:
 \code
  mksqlite('open', 'testdb.db3');
  result = mksqlite('select * from testtable');
  mksqlite('close');
 \endcode
 Reads all fields from table "testtable" from the database "testdb.db3"
 into the \a result
 \n
 \anchor cmd_show_tables
 \b Example:
 \code
  mksqlite('open', 'testdb.db3')
  mksqlite('show tables')
  mksqlite('close')
 \endcode
 Shows all tables in the database "testdb.db3" 
 <HR>


 \section detail_desc_sec3 Parameter binding
 The SQL syntax allows the use of parameters, which are identified
 by placeholders, and then filled with contents by trailing arguments.\n
 Allowed placeholders in SQLlite are: ?, ?NNN, :NAME, \$NAME, \@NAME
 A placeholder can only stand for one value, not for a command,
 split-name, or table, etc.
 \n
 \b Example:
 \code
  mksqlite( 'insert firstName, lastName, city into AddressBook values (?,?,?)', ...
            'Gunther', 'Meyer', 'Munich' );
 \endcode
 Instead of a listing of arguments, a cell array or a struct array may be provided that 
 contains the arguments.\n
 If fewer arguments are given then required, the remaining parameters are 
 filled with NULLs.  If more arguments are given than necessary, the
 function reports an error.  \n
 If it is intended, that implicit calls with the same command and the remaining
 arguments shall be done, so called parameter wrapping must be activated:
 \n
 \b Examples:
 \code
  % Reorder arguments with numbered parameters
  mksqlite( 'insert firstName, lastName, city into AddressBook values (?3,?2,?1)', ...
            'Munich', 'Meyer', 'Gunther' );

  % Activate parameter wrapping to insert multiple datasets
  mksqlite( 'param_wrapping', 1 ); 

  % Insert 2 new datasets with named parameters
  mksqlite( 'insert firstName, lastName, city into AddressBook values (:city,:lastName,:firstName)', ...
            'Munich', 'Meyer', 'Gunther', ...
            'Frankfurt', 'Graf', 'Thomas' );

  % Insert 2 new datasets with named parameters and arguments as cell array
  data = {'Munich', 'Meyer', 'Gunther', 'Frankfurt', 'Graf', 'Thomas'};
  mksqlite( 'insert firstName, lastName, city into AddressBook values (:city,:lastName,:firstName)', ...
            data );

  % Insert 2 new datasets with named parameters and arguments as struct array
  data = struct;
  data(1).city = 'Munich';
  data(1).firstName = 'Gunther';
  data(1).lastName = 'Meyer';
  data(2).city = 'Frankfurt';
  data(2).firstName = 'Thomas';
  data(2).lastName = 'Graf';
  mksqlite( 'insert firstName, lastName, city into AddressBook values (:city,:lastName,:firstName)', ...
            data );
 \endcode
 An argument may be a real value (scalar or array) or a string.  
 Non-scalar values are treated as a BLOB (unit8) SQL datatype. \n
 ( BLOB = (B)inary (L)arge (OB)ject) )
 \n
 \b Example:
 \code
  data = rand(10,15);
  mksqlite( 'insert data into MyTable values (?)', data );
  query = mksqlite( 'select data from MyTable' );
  data_sql = typecast( query(1).data, 'double' );
  data_sql = reshape( data_sql, 10, 15 );
 \endcode
 \anchor cmd_typedblobs
 BLOBs are always stored as a vector of uint8 values in the database.
 In order to retrieve the original format (for example, double) and
 dimensions of the matrix, explicit typecast() and reshape() functions
 must be used. (Refer to the examples \ref example_2 and \ref example_16)\n
 Optionally this information (type) can be stored after the BLOB.
 The indicated post-processing is then no longer necessary, but the
 database is then no longer compatible with other software!\n
 The typecasting conversion can be activated/deactivated with:
 \code
   mksqlite( 'typedBLOBs', 1 );  activate
   mksqlite( 'typedBLOBs', 0 );  deactivate
 \endcode
 (see also the example \ref example_6) \n
 Type conversion only works with numeric arrays and vectors. structs,
 cell arrays and complex data must be converted beforehand. Matlab
 can do this conversion through undocumented functions:\n
 getByteStreamFromArray() and getArrayFromByteStream(). \n
 This functionality is activated by following command:
 \code
   mksqlite ( 'typedBLOBs', 2);  expanded activation
 \endcode
 \anchor cmd_compression
 The data in a BLOB is stored either uncompressed (standard) or
 compressed.  Automatic compression of the data is only necessary for
 typed BLOBs, but must be activated:
 \code
   mksqlite( 'compression', 'lz4', 9 );  activate maximal compression (9="max", 0="off")
 \endcode
 (See also examples \ref example_9 and \ref example_10)\n
 \n
 \anchor cmd_compr_check
 The compression uses BLOSC (http://blosc.pytabales.org/trac)
 After compression, the data is unpacked and compared with the original.
 If there is a difference, an error report is given.  If this 
 functionality is not desirable, it can be deactivated (data is 
 stored without verification).
 \code
   mksqlite( 'compression_check', 0 );  deactivate the check (1=activate)
 \endcode
 Compatibility:\n
 Stored compressed blobs cannot be retrieved with older versions of mksqlite,
 this will trigger an error report. In contrast, uncompressed BLOBS can be 
 retrieved with older versions. Of course BLOBs stored with older versions
 can be retrieved with this version.\n
 \n
 Remarks on compression rate:\n
 The achievable compression rates depend strongly on the contents of the 
 variables.  Although BLOSC is equipped to handle numeric data, its
 performance on randomized numbers (double) is poor (~95).  If there are
 many identical values, for example from quantization, the compression rate
 is markedly improved.\n
 \n
 Further compression methods:\n
 "QLIN16":\n
 QLIN16 is a lossy compression method.  The data is linearly discretize
 to 65529 steps and stored as 16-bit values.  Zero, as well as Infinity and Nan
 can also be used, as they are stored as special values (65529...65535).
 Differing compression rates are not supported, so this compressor should
 always be set to 1.\n
 \n
 "QLOG16":\n
 Works like QLIN16, except that the quantization uses logarithmic
 scaling, therefore storage of negative values is not allowed, but
 NULL, Nan, and infinity are still accepted.  Similarly, differing
 compression rates are not supported, so should always be set to 1.\n
 <HR>
 

 \section detail_desc_sec4 Control the format of result for queries
 \anchor cmd_result_type
 
 Beside the described calling convention, one can retrieve two further
 often needed results:
 -# The row count (rowcount)
 -# The original table column names (colnames)

 Both results are given with the common call already:\n
 \code
  [result,rowcount,colnames] = mksqlite(...)
 \endcode

 Per default an array of structs will be returned for table queries.
 You can decide between three different kinds of result types:
 - (0) array of structs (default)
 - (1) struct of arrays
 - (2) cell matrix

 You can change the default setting (n=0) with following call:
 \code
  mksqlite( 'result_type', n );
 \endcode
 (see \ref example_4) 
 <HR>


 \section detail_desc_sec5 Extra SQL functions
 mksqlite offers additional SQL functions besides the known "core functions"
 like replace, trim, abs, round, ...
 This version offers 10 additional functions:
 \li ceil(x):
     Rounds x upward, returning the smallest integral value that is not less than x. If the result is not representable
     the return value is NULL
 \li floor(x):
     Rounds x downward, returning the largest integral value that is not greater than x. If the result is not representable
     the return value is NULL
 \li pow(x,y):
     Calculates x raised to exponent y. If the result is not representable
     the return value is NULL
 \li lg(x):
     Calculates the decadic logarithm of x. If the result is not representable
     the return value is NULL.
 \li ln(x):
     Calculates the natural logarithm of x. If the result is not representable
     the return value is NULL.
 \li exp(x):
     Calculates the exponential function with e raised x. If the result is not representable
     the return value is NULL.
 \li regex(str,pattern):
     Finds the first substring of str that matches the regular expression pattern.
 \li regex(str,pattern,repstr):
     Finds the first substring of str, that  matches the regular expression pattern.
     The return value replaces the value with repstr.
     (mksqlite uses the perl-compatible regex engine "DEELX".
     Further information can be found at www.regexlab.com or wikipedia)
 \li md5(x):
     Computes and returns the MD5 hash
 \li bdcpacktime(x):
     Computes the required time for the actual compression of x.
 \li bdcunpacktime(x):
     Equivalent to bdcpacktime(x), but for unpacking
 \li bdcratio(x):
     Computes the compression factor for x, using the currently set
     compression method.
 \n
 The use of regex in combination with parameters offers an
 especially efficient possibility for complex queries on text contents.

 Example:
 \code
   mksqlite( [ 'SELECT REGEX(field1,"[FMA][XYZ]MR[VH][RL]") AS re_field FROM Table ', ...
               'WHERE REGEX(?,?,?) NOT NULL' ], 'field2', '(\\d{5})_(.*)', '$1' );
 \endcode
 Note that in contrast to sqlite only one implementation per function name is allowed in mkslite. 
 Defining a new implemention of one function discards the previous one.
 \n
 (also see \ref example_5 for further examples...)
  <HR>
 
 \section appdef_functions Application defined functions
 You can register your own MATLAB functions as SQL functions with one of
 the following calls:
 \code
   mksqlite( 'create function', <name>, function_handle );
   mksqlite( 'create aggregation', <name>, step_function_handle, final_function_handle );
 \endcode
 So you can access your MATLAB code from within SQL queries. 
 \n
 (see \ref example_17 for examples...)
 
 \section detail_desc_sec6 Summary of mksqlite commands
 <table>
 <tr><th>Command</th>                                           <th>Description</th>                                            <th>Valid parameter(s)</th>        <th>Default value(s)</th></tr>
 <tr><td>\ref cmd_version_mex "'version mex'"</td>              <td>Returns the version of mksqlite</td>                        <td>-</td>                         <td>-</td></tr>
 <tr><td>\ref cmd_version_sql "'version sql'"</td>              <td>Returns the version of SQLite</td>                          <td>-</td>                         <td>-</td></tr>
 <tr><td>\ref cmd_open "'open'"</td>                            <td>Opens a database</td>                                       <td>Database (file-)name</td>      <td>-</td></tr>
 <tr><td>\ref cmd_close "'close'"</td>                          <td>Closes one or all database(s)</td>                          <td>-</td>                         <td>-</td></tr>
 <tr><td>'filename'</td>                                        <td>Returns the filename of the database</td>                   <td>0|1\n
                                                                                                                                    The argument names the database the filename ist queried for.\n
                                                                                                                                    If no argument is passed the filename for the main database is returned.
                                                                                                                                </td>                              <td>-</td></tr>
 <tr><td>'check4uniquefields'</td>                              <td>Avoids duplicate field names in MATLAB structs, \n                        
                                                                    when set to 1</td>                                          <td>0|1</td>                       <td>1</td></tr>
 <tr><td>'convertUTF8'</td>                                     <td>Enables UTF8 text encoding, when set to 1</td>              <td>0|1</td>                       <td>1</td></tr>
 <tr><td>\ref cmd_typedblobs "'typedBLOBs'"</td>                <td>Enables typed BLOB packaging, when set >0\n 
                                                                    - 0: Disable typed BLOBs (store as native byte array)\n 
                                                                    - 1: Enable typed BLOBS (array and data format information 
                                                                         will be stored additionally)
                                                                    - 2: Enable serializing, so more complex data structures 
                                                                         like cell arrays, structs, a.s.o. may be stored\n 
                                                                         
                                                                    \ref example_6 "Example"</td>                               <td>0|1|2</td>                     <td>0</td></tr>
 <tr><td>'NULLasNaN'</td>                                       <td>mksqlite returns NULL values as NaN,\n                                           
                                                                    when set to 1</td>                                          <td>0|1</td>                       <td>0</td></tr>
 <tr><td>'param_wrapping'                                       </td>        <td>Enables parameter wrapping, when set to 1\n 
                                                                    \ref example_12 "Example"</td>                              <td>0|1</td>                       <td>0</td></tr>
 <tr><td>'streaming'</td>                                       <td>Returns 1, when serializing is enabled</td>                 <td>-</td>                         <td>-</td></tr>
 <tr><td>\ref cmd_result_type "'result_type'"</td>              <td>Chooses the result type of sql queries.\n 
                                                                    - 0: Array of structs\n 
                                                                    - 1: Struct of arrays\n 
                                                                    - 2: Cell array (MxN)\n 
                                                                    
                                                                    \ref example_4 "Example"</td>                               <td>0|1|2</td>                     <td>0</td></tr>                         
 <tr><td>\ref cmd_compression "'compression'"</td>              <td>Set compressor when using typedBLOBS=2\n 
                                                                    \ref example_9 "Example"</td>                               <td>"blosc"|"blosclz"|"qlin16"|"qlog16"|"float", 0-9</td>         <td>"blosclz",0</td></tr>          
 <tr><td>\ref cmd_compr_check "'compression_check'"</td>        <td>Enables compressor check, when set to 1.\n 
                                                                    The default decompresses immediately prior 
                                                                    to packed data to ensure by comparing 
                                                                    the data accuracy</td>                                      <td>0|1</td>                       <td>0</td></tr>   
 <tr><td>\ref cmd_show_tables "'show tables'"</td>              <td>Display content of the sqlite_master. That is 
                                                                    the column definitions of tables, views and indexes</td>    <td>-</td>                         <td>-</td></tr>   
 <tr><td>'enable extension'</td>                                <td>Enable extension loading at runtime\n 
                                                                    \ref example_11 "Example"</td>                              <td>0|1</td>                       <td>0</td></tr>   
 <tr><td>'status'</td>                                          <td>Show status of each mksqlite slot in command\n 
                                                                    window. Different slots are accessed trough its 
                                                                    dbids.</td>                                                 <td>-</td>                         <td>-</td></tr>   
 <tr><td>'setbusytimeout'</td>                                  <td>Sets the SQLite busy timeout. A SQL statement
                                                                    whose calculation exceeds this time limit
                                                                    leads into failure abort.</td>                              <td>time in ms</td>                <td>1000</td></tr>   
 </table>
 \n
 \n
 (c) 2020 by Martin Kortmann <mail@kortmann.de>, Andreas Martin <andimartin@users.sourceforge.net>
*/

